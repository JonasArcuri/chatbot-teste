require('dotenv').config();
const axios = require('axios');
const db = require('./firebase/firebase.js');
const conversationContext = require('./conversationContext.js'); // Importar gerenciador de contexto

// Armazena mensagens processadas recentemente
const processedMessages = new Set();

async function handleMessage(client, message) {
    const text = message.body.toLowerCase().trim();
    const from = message.from;
    const messageId = message.id._serialized;

    // Ignora se a mensagem j√° foi processada
    if (processedMessages.has(messageId)) return;
    processedMessages.add(messageId);

    // Limpa a mensagem do cache ap√≥s 10 segundos
    setTimeout(() => {
        processedMessages.delete(messageId);
    }, 10000);

    // Recuperar ou criar contexto da conversa
    const conversation = conversationContext.getConversation(from);

    // Adicionar mensagem do usu√°rio ao contexto
    conversationContext.addMessage(from, text, 'user');

    // L√≥gica para tratamento contextual de mensagens
    if (conversation.stage === 'collecting_business_info') {
        return handleBusinessInfoCollection(client, from, text, conversation);
    }

    // üîç Comando espec√≠fico: Servi√ßos
    if (text.includes('servicos') || text.includes('servi√ßos') || text.includes('servi√ßo')) {
        const servicos = await buscarServicosDoFirebase();
        const resposta = servicos.length > 0
            ? `üõí Servi√ßos dispon√≠veis:\n\n${servicos.map(p => `‚Ä¢ ${p.Nome} - ${p.descricao} - `).join('\n')}`
            : '‚ö†Ô∏è Nenhum servi√ßo encontrado.';

        conversationContext.addMessage(from, resposta, 'bot');
        return setTimeout(() => {
            client.sendMessage(from, resposta);
        }, 1500);
    }

    // Outros comandos semelhantes...

    // ü§ñ Resposta via IA com contexto completo
    const iaReply = await perguntarParaOpenRouter(text, conversation);

    // Adicionar resposta da IA ao contexto
    conversationContext.addMessage(from, iaReply, 'bot');

    return setTimeout(() => {
        client.sendMessage(from, iaReply);
    }, 1500);
}

// Nova fun√ß√£o para lidar com coleta de informa√ß√µes de neg√≥cio
async function handleBusinessInfoCollection(client, from, text, conversation) {
    // Exemplo de coleta de informa√ß√µes para um site
    if (conversation.collectedInfo.service === 'website') {
        switch (conversation.collectedInfo.currentField) {
            case 'company_name':
                conversationContext.updateCollectedInfo(from, { company_name: text });
                conversationContext.updateCollectedInfo(from, { currentField: 'product_service' });

                const nextQuestion = 'ü§î Que tipo de produto ou servi√ßo sua empresa oferece?';
                client.sendMessage(from, nextQuestion);
                conversationContext.addMessage(from, nextQuestion, 'bot');
                break;

            case 'product_service':
                conversationContext.updateCollectedInfo(from, { product_service: text });
                conversationContext.updateCollectedInfo(from, { currentField: 'site_goal' });

                const goalQuestion = 'üéØ Qual o principal objetivo do site? (ex: vendas, portf√≥lio, agendamento)';
                client.sendMessage(from, goalQuestion);
                conversationContext.addMessage(from, goalQuestion, 'bot');
                break;

            // Adicionar mais casos para coleta completa de informa√ß√µes
        }
        return;
    }
}

async function perguntarParaOpenRouter(pergunta, conversation) {
    try {
        // Preparar hist√≥rico de mensagens para contexto
        const messageHistory = conversation.messages
            .slice(-5) // Limitar para as √∫ltimas 5 mensagens
            .map(msg => ({
                role: msg.sender === 'user' ? 'user' : 'assistant',
                content: msg.text
            }));

        const response = await axios.post(
            'https://openrouter.ai/api/v1/chat/completions',
            {
                model: 'deepseek/deepseek-chat-v3-0324:free',
                messages: [
                    {
                        role: 'system',
                        content: `Voc√™ √© o Brunno, assistente da Criat√©, e est√° aqui no WhatsApp para ajudar a marcar uma reuni√£o com um tom leve, humano e natural, como se fosse uma pessoa da equipe conversando normalmente.

Seu objetivo √©:

Receber o cliente com simpatia e leveza

Coletar 3 informa√ß√µes de forma conversada: nome, empresa e motivo da reuni√£o

Pedir duas op√ß√µes de data e hor√°rio

Encerrar a conversa com carinho e repassar tudo para um humano do time

üß† Estilo de fala:
Use frases curtas.

Evite textos longos ou linguagem formal demais.

Escreva como se estivesse em um papo por mensagem com um cliente querido.

Pause entre mensagens (em blocos pequenos).

N√£o use palavras como ‚Äúprocesso‚Äù, ‚Äúformul√°rio‚Äù, ‚Äúagendamento‚Äù, ‚Äúfluxo‚Äù. Seja direto, simples e gentil.

Priorize: empatia, leveza e dire√ß√£o.

üó£Ô∏è Exemplo de conversa guiada:
Mensagem 1:
Oii! Tudo certo por a√≠? üòä

Mensagem 2 (depois de alguns segundos):
Que bom ter voc√™ aqui.
T√¥ por aqui pra te ajudar a marcar uma conversa com nosso time, beleza?

Mensagem 3:
Posso te pedir umas infos rapidinho?

Mensagem 4 (depois de resposta):
Show! Me diz seu nome? üôè

Mensagem 5:
E o nome da sua empresa?

Mensagem 6:
Pra gente te ajudar da melhor forma, qual seria o motivo da reuni√£o?

Mensagem 7 (ap√≥s resposta):
Maravilha.
Agora me conta:
Quais dois dias e hor√°rios funcionam melhor pra voc√™?

Mensagem 8 (ap√≥s receber as op√ß√µes):
Perfeito! Obrigado por isso.
Vou passar tudo pro pessoal aqui, e eles j√° te respondem confirmando, t√°?

Mensagem 9:
Valeu mesmo! At√© j√° ‚ú®

‚ö†Ô∏è Regras comportamentais para o bot:
Nunca escreva blocos longos. Sempre que poss√≠vel, divida a mensagem em partes.

Use emojis de forma sutil (1 por mensagem, no m√°ximo).

N√£o seja mec√¢nico. Trate cada resposta do cliente como algo √∫nico e responda de forma natural e flex√≠vel.

Se o cliente fizer perguntas fora do escopo, responda brevemente e conduza de volta com delicadeza.

Nunca confirme a reuni√£o. Apenas colete as informa√ß√µes e avise que um humano dar√° sequ√™ncia.`
                    },
                    ...messageHistory, // Adicionar hist√≥rico de mensagens
                    { role: 'user', content: pergunta }
                ]
            },
            {
                headers: {
                    'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'http://localhost',
                    'X-Title': 'whatsapp-chatbot'
                }
            }
        );

        return response.data.choices[0].message.content.trim();
    } catch (error) {
        console.error('Erro com IA (OpenRouter):', error.response?.data || error.message);
        return '‚ö†Ô∏è Desculpe, n√£o consegui entender. Pode repetir?';
    }
}

// Fun√ß√µes de busca no Firebase permanecem iguais
// ...

// üî• Buscar dados do Firestore
async function buscarServicosDoFirebase() {
    try {
        const snapshot = await db.collection('servicos').get();
        const servicos = [];
        snapshot.forEach(doc => servicos.push(doc.data()));
        return servicos;
    } catch (error) {
        console.error('Erro ao buscar servicos no Firebase:', error.message);
        return [];
    }
}

async function buscarSobreDoFirebase() {
    try {
        const snapshot = await db.collection('sobre').get();
        const sobre = [];
        snapshot.forEach(doc => sobre.push(doc.data()));
        return sobre;
    } catch (error) {
        console.error('Erro ao buscar Sobre no Firebase:', error.message);
        return [];
    }
}

async function buscarPublicoDoFirebase() {
    try {
        const snapshot = await db.collection('publico').get();
        const publico = [];
        snapshot.forEach(doc => publico.push(doc.data()));
        return publico;
    } catch (error) {
        console.error('Erro ao buscar Publico no Firebase:', error.message);
        return [];
    }
}
// Outras fun√ß√µes de busca no Firebase permanecem iguais

module.exports = { handleMessage };